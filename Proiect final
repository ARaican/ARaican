WITH monthly_data AS (
    SELECT
        DATE_TRUNC('month', payment_date)::DATE AS month,
        user_id,
        SUM(revenue_amount_usd) AS monthly_revenue
    FROM
        project.games_payments
    GROUP BY
        1, 2
),
monthly_metrics AS (
    SELECT
        month,
        COUNT(DISTINCT user_id) AS total_paid_users,
        SUM(monthly_revenue) AS mrr,
        SUM(monthly_revenue) / COUNT(DISTINCT user_id) AS arppu
    FROM
        monthly_data
    GROUP BY
        month
),
new_paid_users AS (
    SELECT
        month,
        COUNT(user_id) AS new_paid_users
    FROM (
        SELECT
            user_id,
            MIN(DATE_TRUNC('month', payment_date)) AS month
        FROM
            project.games_payments
        GROUP BY
            user_id
    ) AS first_payment
    GROUP BY
        month
),
new_mrr AS (
    SELECT
        DATE_TRUNC('month', payment_date)::DATE AS month,
        SUM(revenue_amount_usd) AS new_mrr
    FROM (
        SELECT
            user_id,
            payment_date,
            revenue_amount_usd,
            MIN(DATE_TRUNC('month', payment_date)) OVER (PARTITION BY user_id ORDER BY payment_date) AS first_month
        FROM
            project.games_payments
    ) AS payments
    WHERE
        DATE_TRUNC('month', payment_date) = first_month
    GROUP BY
        1
),
all_users_per_month AS (
    SELECT
        DATE_TRUNC('month', payment_date)::DATE AS month,
        user_id
    FROM
        project.games_payments
    GROUP BY
        1, 2
),
churned_users AS (
    SELECT
        a1.month AS previous_month,
        COUNT(DISTINCT a1.user_id) AS churned_users
    FROM
        all_users_per_month a1
    LEFT JOIN
        all_users_per_month a2
    ON
        a1.user_id = a2.user_id
        AND a2.month = a1.month + INTERVAL '1 month'
    WHERE
        a2.user_id IS NULL
    GROUP BY
        a1.month
),
churned_revenue AS (
    SELECT
        a1.month AS previous_month,
        SUM(a1.monthly_revenue) AS churned_revenue
    FROM
        monthly_data a1
    LEFT JOIN
        monthly_data a2
    ON
        a1.user_id = a2.user_id
        AND a2.month = a1.month + INTERVAL '1 month'
    WHERE
        a2.user_id IS NULL
    GROUP BY
        a1.month
),
expansion_mrr AS (
    SELECT
        month,
        SUM(GREATEST(0, new_monthly_revenue - old_monthly_revenue)) AS expansion_mrr
    FROM (
        SELECT
            user_id,
            LAG(SUM(revenue_amount_usd)) OVER (PARTITION BY user_id ORDER BY DATE_TRUNC('month', payment_date)) AS old_monthly_revenue,
            SUM(revenue_amount_usd) AS new_monthly_revenue,
            DATE_TRUNC('month', payment_date) AS month
        FROM
            project.games_payments
        GROUP BY
            user_id, month
    ) AS revenue_diff
    WHERE
        old_monthly_revenue IS NOT NULL
    GROUP BY
        month
),
contraction_mrr AS (
    SELECT
        month,
        SUM(GREATEST(0, old_monthly_revenue - new_monthly_revenue)) AS contraction_mrr
    FROM (
        SELECT
            user_id,
            LAG(SUM(revenue_amount_usd)) OVER (PARTITION BY user_id ORDER BY DATE_TRUNC('month', payment_date)) AS old_monthly_revenue,
            SUM(revenue_amount_usd) AS new_monthly_revenue,
            DATE_TRUNC('month', payment_date) AS month
        FROM
            project.games_payments
        GROUP BY
            user_id, month
    ) AS revenue_diff
    WHERE
        old_monthly_revenue IS NOT NULL
    GROUP BY
        month
),
customer_lifetime AS (
    SELECT
        SUM(lifetime_months) AS total_lifetime_months
    FROM (
        SELECT
            user_id,
            COUNT(DISTINCT DATE_TRUNC('month', payment_date)) AS lifetime_months
        FROM
            project.games_payments
        GROUP BY
            user_id
    ) AS user_lifetime
),
customer_lifetime_value AS (
    SELECT
        SUM(total_spent) AS total_lifetime_value
    FROM (
        SELECT
            user_id,
            SUM(revenue_amount_usd) AS total_spent
        FROM
            project.games_payments
        GROUP BY
            user_id
    ) AS user_spending
)
SELECT
    mm.month,
    ROUND(mm.mrr, 2) AS mrr,
    mm.total_paid_users,
    ROUND(mm.arppu, 2) AS arppu,
    np.new_paid_users,
    ROUND(COALESCE(nm.new_mrr, 0), 2) AS new_mrr,
    COALESCE(cu.churned_users, 0) AS churned_users,
    ROUND(CAST(COALESCE(cu.churned_users, 0)::FLOAT / NULLIF(LAG(mm.total_paid_users) OVER (ORDER BY mm.month), 0) AS NUMERIC), 2) AS churn_rate,
    ROUND(COALESCE(cr.churned_revenue, 0), 2) AS churned_revenue,
    ROUND(CAST(COALESCE(cr.churned_revenue, 0)::FLOAT / NULLIF(LAG(mm.mrr) OVER (ORDER BY mm.month), 0) AS NUMERIC), 2) AS revenue_churn_rate,
    ROUND(em.expansion_mrr, 2) AS expansion_mrr,
    ROUND(cm.contraction_mrr, 2) AS contraction_mrr,
    cl.total_lifetime_months AS customer_lifetime,
    clv.total_lifetime_value AS customer_lifetime_value
FROM
    monthly_metrics mm
    LEFT JOIN new_paid_users np ON mm.month = np.month
    LEFT JOIN new_mrr nm ON mm.month = nm.month
    LEFT JOIN churned_users cu ON mm.month = cu.previous_month
    LEFT JOIN churned_revenue cr ON mm.month = cr.previous_month
    LEFT JOIN expansion_mrr em ON mm.month = em.month
    LEFT JOIN contraction_mrr cm ON mm.month = cm.month,
    customer_lifetime cl,
    customer_lifetime_value clv
ORDER BY
    mm.month;
